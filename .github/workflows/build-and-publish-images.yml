name: build and publish imgs workflow

on:
  workflow_call:
    inputs:
      push:
        required: true
        type: boolean

defaults:
  run:
    shell: bash

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      LATEST_UBUNTU_VER: ${{ steps.latest-values.outputs.LATEST_UBUNTU_VER }}
      LATEST_CUDA_VER: ${{ steps.latest-values.outputs.LATEST_CUDA_VER }}
      LATEST_PYTHON_VER: ${{ steps.latest-values.outputs.LATEST_PYTHON_VER }}
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compute latest values
        id: latest-values
        run: |
          set -x
          LATEST_UBUNTU_VER=$(yq '.LINUX_VER | map(select(. == "*ubuntu*")) | sort | .[-1]' axis.yaml)
          LATEST_CUDA_VER=$(yq '.CUDA_VER | sort | .[-1]' axis.yaml)
          LATEST_PYTHON_VER=$(yq '.PYTHON_VER | sort | .[-1]' axis.yaml)

          echo "LATEST_UBUNTU_VER=${LATEST_UBUNTU_VER}" >> ${GITHUB_OUTPUT}
          echo "LATEST_CUDA_VER=${LATEST_CUDA_VER}" >> ${GITHUB_OUTPUT}
          echo "LATEST_PYTHON_VER=${LATEST_PYTHON_VER}" >> ${GITHUB_OUTPUT}
      - name: Compute matrix
        id: compute-matrix
        run: |
          MATRIX=$(yq -o json '.' axis.yaml | jq -c)
          echo "MATRIX=${MATRIX}" >> ${GITHUB_OUTPUT}
  docker:
    needs: compute-matrix
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}
    strategy:
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Compute Tags
        id: compute-tags
        run: |
          set -x
          BASE_NAME="rapidsai/mambaforge-cuda"
          RAPIDS_NAME="${BASE_NAME}-rapids"

          CURRENT_TAG="cuda${{ matrix.CUDA_VER }}-base-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}"

          BASE_TAGS="${BASE_NAME}:${CURRENT_TAG}"
          RAPIDS_TAGS="${RAPIDS_NAME}:${CURRENT_TAG}"

          if [[
            "${{ needs.compute-matrix.outputs.LATEST_UBUNTU_VER }}" == "${{ matrix.LINUX_VER }}" &&
            "${{ needs.compute-matrix.outputs.LATEST_CUDA_VER }}" == "${{ matrix.CUDA_VER }}" &&
            "${{ needs.compute-matrix.outputs.LATEST_PYTHON_VER }}" == "${{ matrix.PYTHON_VER }}"
          ]]; then
            BASE_TAGS+=",${BASE_NAME}:latest"
            RAPIDS_TAGS+=",${RAPIDS_NAME}:latest"
          fi
          echo "BASE_TAGS=${BASE_TAGS}" >> ${GITHUB_OUTPUT}
          echo "RAPIDS_TAGS=${RAPIDS_TAGS}" >> ${GITHUB_OUTPUT}
      - name: Compute Platforms
        id: compute-platforms
        run: |
          set -x
          PLATFORMS="linux/amd64"

          if [[
            "${{ matrix.CUDA_VER }}" > "11.2.2" &&
            "${{ matrix.LINUX_VER }}" != "centos7"
          ]]; then
            PLATFORMS+=",linux/arm64"
          fi
          echo "PLATFORMS=${PLATFORMS}" >> ${GITHUB_OUTPUT}
      - name: Build and push mambaforge-cuda
        timeout-minutes: 10
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ steps.compute-platforms.outputs.PLATFORMS }}
          push: ${{ inputs.push }}
          pull: true
          target: mambaforge-cuda
          build-args: |
            CUDA_VER=${{ matrix.CUDA_VER }}
            LINUX_VER=${{ matrix.LINUX_VER }}
            PYTHON_VER=${{ matrix.PYTHON_VER }}
          tags: ${{ steps.compute-tags.outputs.BASE_TAGS }}
      - name: Build and push mambaforge-cuda-rapids
        timeout-minutes: 10
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ steps.compute-platforms.outputs.PLATFORMS }}
          push: ${{ inputs.push }}
          pull: true
          target: mambaforge-cuda-rapids
          build-args: |
            CUDA_VER=${{ matrix.CUDA_VER }}
            LINUX_VER=${{ matrix.LINUX_VER }}
            PYTHON_VER=${{ matrix.PYTHON_VER }}
          tags: ${{ steps.compute-tags.outputs.RAPIDS_TAGS }}
